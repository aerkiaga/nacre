// A proposition that cannot be proven,
// or a type that cannot be constructed.
//
// A proof of `False` can be used to
// prove any other proposition.
type False(T: Type) -> T: Type;

// The logical product of two propositions,
// or the cartesian product of two types.
//
// `And A B` can be constructed from both `A` and `B`.
fn And(P: Type, Q: Type) {
    type(T: Type, f: P -> Q -> T) -> T
} -> Type;

impl And {
    // Construct from both sides.
    fn from_both(P: Type, Q: Type)(left: P, right: Q) {
        fn(T: Type, f: P -> Q -> T) {
            f left right
        }
    } -> And P Q;
    
    // Get left side.
    fn left(P: Type, Q: Type)(self: And P Q) {
        fn getter(p: P, q: Q) {p};
        self P getter
    } -> P;
    
    // Get right side.
    fn right(P: Type, Q: Type)(self: And P Q) {
        fn getter(p: P, q: Q) {q};
        self Q getter
    } -> Q;
    
    // Exchange both sides.
    fn symmetric(P: Type, Q: Type)(self: And P Q) {
        let left = And::left P Q self;
        let right = And::right P Q self;
        And::from_both Q P right left
    } -> And Q P;
    
    // Construct `And P R` from `And P Q` and ` And Q R`.
    fn transitive(P: Type, Q: Type, R: Type)(self: And P Q, other: And Q R) {
        let left = And::left P Q self;
        let right = And::right Q R other;
        And::from_both P R left right
    } -> And P R
};

// The logical sum of two propositions,
// or the union of two types.
//
// `Or A B` can be constructed from either `A` or `B`.
fn Or(P: Type, Q: Type) {
    type(T: Type, p: P -> T, q: Q -> T) -> T
} -> Type;

impl Or {
    // Construct from left side.
    fn from_left(P: Type, Q: Type)(left: P) {
        fn(T: Type, p: P -> T, q: Q -> T) {
            p left
        }
    } -> Or P Q;
    
    // Construct from right side.
    fn from_right(P: Type, Q: Type)(right: Q) {
        fn(T: Type, p: P -> T, q: Q -> T) {
            q right
        }
    } -> Or P Q
};

// The negation of a proposition.
//
// `Not P` can only be constructed if `P` cannot.
// Note that `Not (Not P)` can be constructed
// if _a proof that P cannot_ cannot, which
// does not imply that `P` can. In other words,
// double negation of a proposition does not imply it.
fn Not(P: Type) {
    type(T: Type, p: P) -> T
} -> Type;

// Existential quantifier.
//
// `Exists P Q` can only be constructed if there exists
// some `x: P` such that `Q x` can be constructed.
// `x` and the proof of `Q x` cannot be recovered
// from a proof of `Exists P Q`.
fn Exists(P: Type, Q: P -> Type) {
    type(T: Type)
    -> (type(x: P) -> Q x -> T)
    -> T
} -> Type;

impl Exists {
    // Construct from example and proof that it
    // fulfills the criterion.
    fn from_example(P: Type, Q: P -> Type)(example: P, proof: Q example) {
        fn(T: Type)(f: type(x: P) -> Q x -> T) {
            f example proof
        }
    } -> Exists P Q
};

// Conditional operator, or map.
//
// `If P Q` is the type of functions
// mapping P to Q. It can only be constructed
// if such functions exist, so
// if `P` and `Q` are propositions,
// `If P Q` can only be constructed if
// `P` implies `Q` (if `P` then `Q`).
fn If(P: Type, Q: Type) {
    P -> Q
} -> Type;

impl If {
    // Construct an implication of a type onto itself.
    fn reflexive(P: Type) {
        fn(p: P) {p}
    } -> If P P;
    
    // Construct `If P R` from `If P Q` and ` If Q R`.
    fn transitive(P: Type, Q: Type, R: Type)(self: If P Q, other: If Q R) {
        fn(p: P) {
            other (self p)
        }
    } -> If P R
};

// Biconditional operator, or bidirectional map.
//
// `Iff P Q` is the type of pairs of functions
// where one member maps `P` to `Q` and the other
// maps `Q` back to `P`. It can only be constructed
// if both such functions exist, so
// if `P` and `Q` are propositions,
// `Iff P Q` can only be constructed if
// either implies the other (iff `P` then `Q`).
fn Iff(P: Type, Q: Type) {
    And (P -> Q) (Q -> P)
} -> Type;

impl Iff {
    // Construct from implications from either side to the other.
    fn from_if(P: Type, Q: Type)(forward: P -> Q, backward: Q -> P) {
        And::from_both (P -> Q) (Q -> P) forward backward
    } -> Iff P Q;
    
    // Get forwards implication.
    fn forwards(P: Type, Q: Type)(self: Iff P Q) {
        And::left (P -> Q) (Q -> P) self
    } -> P -> Q;
    
    // Get backwards implication.
    fn backwards(P: Type, Q: Type)(self: Iff P Q) {
        fn getter(p: P, q: Q) {q};
        And::right (P -> Q) (Q -> P) self
    } -> Q -> P;
    
    // Construct an implication of a type onto itself.
    fn reflexive(P: Type) {
        let proof = If::reflexive P;
        And::from_both (P -> P) (P -> P) proof proof
    } -> Iff P P;
    
    // Exchange both sides.
    fn symmetric(P: Type, Q: Type)(self: Iff P Q) {
        And::symmetric (P -> Q) (Q -> P) self
    } -> Iff Q P;
    
    // Construct `Iff P R` from `Iff P Q` and ` Iff Q R`.
    fn transitive(P: Type, Q: Type, R: Type)(self: Iff P Q, other: Iff Q R) {
        let self_forwards = Iff::forwards P Q self;
        let other_forwards = Iff::forwards Q R other;
        let forwards = If::transitive P Q R self_forwards other_forwards;
        let self_backwards = Iff::backwards P Q self;
        let other_backwards = Iff::backwards Q R other;
        let backwards = If::transitive R Q P other_backwards self_backwards;
        Iff::from_if P R forwards backwards
    } -> Iff P R
};

// Equality.
//
// Can only be constructed if both sides
// are indistinguishable.
fn Eq(P: Type, a: P, b: P) {
    type(T: P -> Type) -> Iff (T a) (T b) 
} -> Type;

impl Eq {
    // Construct an equality of an object to itself.
    fn reflexive(P: Type, p: P) {
        fn(T: P -> Type) {
            Iff::reflexive (T p)
        }
    } -> Eq P p p;
    
    // Exchange both sides.
    fn symmetric(P: Type, a: P, b: P)(self: Eq P a b) {
        fn(T: P -> Type) {
            Iff::symmetric (T a) (T b) (self T)
        }
    } -> Eq P b a;
    
    // Construct `Eq P a c` from `Eq P a b` and ` Eq P b c`.
    fn transitive(P: Type, a: P, b: P, c: P)(self: Eq P a b, other: Eq P b c) {
        fn(T: P -> Type) {
            Iff::transitive (T a) (T b) (T c) (self T) (other T)
        }
    } -> Eq P a c;
    
    // Replaces the left side of the equality with its right side
    // in a term given by `Term` and constructed by `proof`.
    //
    // Example:
    // ```
    // fn eq_transitive(P: Type, a: P, b: P, c: P)(ab: Eq P a b, bc: Eq P b c) {
    //     Eq::apply_forwards P b c 
    //         bc // use this equality: b = c (replace b with c)
    //         (fn(x: P) {Eq P a x}) // replace the b marked as x with c in a = b
    //         ab // give a proof of a = b
    //     // we get a proof that a = c
    // } -> Eq P a c;
    // ```
    fn apply_forwards(P: Type, a: P, b: P)(self: Eq P a b, Term: P -> Type, proof: Term a) {
        Iff::forwards (Term a) (Term b) (self Term) proof
    } -> Term b;
    
    // Replaces the right side of the equality with its left side
    // in a term given by `Term` and constructed by `proof`.
    //
    // See [Eq::apply_forwards] for an example.
    fn apply_backwards(P: Type, a: P, b: P)(self: Eq P a b, Term: P -> Type, proof: Term b) {
        Iff::backwards (Term a) (Term b) (self Term) proof
    } -> Term a
}
